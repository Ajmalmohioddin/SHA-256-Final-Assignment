#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <fstream>
#include <cstdint>

using namespace std;

const uint32_t hash_values[] = {
    0x6a09e667, 
    0xbb67ae85, 
    0x3c6ef372, 
    0xa54ff53a,
    0x510e527f, 
    0x9b05688c, 
    0x1f83d9ab, 
    0x5be0cd19
};


const uint32_t K[] = {
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

string sha256_digest(const string &message) {
    uint32_t H[8];
    uint32_t W[64];
    uint32_t a, b, c, d, e, f, g, h;

    //Storing hash values in array H[0..7]
    for (int i = 0; i < 8; ++i)     
        H[i] = hash_values[i];

    //Padding
    string padded_Message = message;
    padded_Message += static_cast<char>(0x80);       // Appending bit 1

    // Appending 0 till the bits of message is equal to 448
    while ((padded_Message.size() * 8) % 512 != 448)     
        padded_Message += static_cast<char>(0x00);   // Appending 0 bits
    uint64_t messageLength = message.size() * 8;
    padded_Message += string(7 - message.size() % 8, 0x00);

    // Adding last 64bits to the padded message
    for (int i = 0; i < 8; ++i)
        padded_Message += static_cast<char>((messageLength >> (56 - i * 8)) & 0xFF);

    for (size_t chunk = 0; chunk < padded_Message.size(); chunk += 64) {
        for (int i = 0; i < 16; ++i) {
            W[i] = (padded_Message[chunk + 4 * i] << 24) |
                   (padded_Message[chunk + 4 * i + 1] << 16) |
                   (padded_Message[chunk + 4 * i + 2] << 8) |
                   (padded_Message[chunk + 4 * i + 3]);
        }

//Sigma Functions for Compression
#define Rotate_Right(x, n) (((x) >> (n)) | ((x) << (32 - (n))))
#define SIGMA0(x) (Rotate_Right(x, 2) ^ Rotate_Right(x, 13) ^ Rotate_Right(x, 22))
#define SIGMA1(x) (Rotate_Right(x, 6) ^ Rotate_Right(x, 11) ^ Rotate_Right(x, 25))
#define sigma0(x) (Rotate_Right(x, 7) ^ Rotate_Right(x, 18) ^ ((x) >> 3)) 
#define sigma1(x) (Rotate_Right(x, 17) ^ Rotate_Right(x, 19) ^ ((x) >> 10))


    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array:
        for (int i = 16; i < 64; ++i) {
            W[i] = sigma1(W[i - 2]) + W[i - 7] + sigma0(W[i - 15]) + W[i - 16];
        }

    // Initialize working variables to hash value
        a = H[0]; 
        b = H[1]; 
        c = H[2]; 
        d = H[3];
        e = H[4]; 
        f = H[5]; 
        g = H[6]; 
        h = H[7];

    //Compression function loop
        for (int i = 0; i < 64; ++i) {
            uint32_t ch = (e & f) ^ (~e & g);
            uint32_t temp1 = h + SIGMA1(e) + ch + K[i] + W[i];
            uint32_t maj = (a & b) ^ (a & c) ^ (b & c);
            uint32_t temp2 = SIGMA0(a) + maj;
            h = g;
            g = f;
            f = e;
            e = d + temp1;
            d = c;
            c = b;
            b = a;
            a = temp1 + temp2;
        }

        H[0] += a; 
        H[1] += b; 
        H[2] += c; 
        H[3] += d;
        H[4] += e; 
        H[5] += f; 
        H[6] += g; 
        H[7] += h;
    }

    stringstream ss;
    for (int i = 0; i < 8; i++) {
        ss << hex << H[i];
    }
    return ss.str();
}

string file_input(const string &filename) {
    ifstream file(filename, ios::binary);
    ostringstream oss;
    oss << file.rdbuf();
    return sha256_digest(oss.str());
}

int main() {
    string filename;
    cout << "Enter path: " << endl;
    getline(cin, filename);
    cout << "Hashing..." << endl;
    string hash_output = file_input(filename);
    if (!hash_output.empty()) {
        cout << "SHA-256 Digest of File -->" << filename << ": " << hash_output << endl;
    }
    return 0;
}

